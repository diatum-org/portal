/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.21).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.portal.api;

import org.coredb.portal.model.PortalConfig;
import org.coredb.portal.model.Domain;
import org.coredb.portal.model.PortalStat;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "admin", description = "the admin API")
public interface AdminApi {

    @ApiOperation(value = "", nickname = "addStat", notes = "Add a new stat", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/stats",
        method = RequestMethod.POST)
    ResponseEntity<Void> addStat(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
,@NotNull @Min(0) @Max(100) @ApiParam(value = "time", required = true, allowableValues = "") @Valid @RequestParam(value = "processor", required = true) Integer processor
,@NotNull @ApiParam(value = "current memory free", required = true) @Valid @RequestParam(value = "memory", required = true) Long memory
,@NotNull @ApiParam(value = "current storage free", required = true) @Valid @RequestParam(value = "storage", required = true) Long storage
);

    @ApiOperation(value = "", nickname = "getStats", notes = "Retrieve server metrics", response = PortalStat.class, responseContainer = "List", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PortalStat.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/stats",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PortalStat>> getStats(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token
);

    @ApiOperation(value = "", nickname = "getConfig", notes = "Retrieve config of portal", response = PortalConfig.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PortalConfig.class),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/config",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PortalConfig> getConfig(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "", nickname = "setPortalNode", notes = "Set node of portal identity", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/config/node",
        produces = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> setPortalNode(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,
        @ApiParam(value = "portal node", required = false) @Valid @RequestParam(value = "value", required = false) String value);


    @ApiOperation(value = "", nickname = "setPortalToken", notes = "Set token of portal identity", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/config/token",
        produces = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> setPortalToken(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,
        @ApiParam(value = "access token", required = false) @Valid @RequestParam(value = "value", required = false) String value);


    @ApiOperation(value = "", nickname = "addDomain", notes = "Add domain entry", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/config/domain",
        produces = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Domain> addDomain(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "", nickname = "setDomain", notes = "Update domain entry", tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 403, message = "access denied"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/admin/config/domain",
        consumes = { "application/json" },
        produces = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Domain> setDomain(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,
        @ApiParam(value = "updated config", required = true )  @Valid @RequestBody Domain body);



}

